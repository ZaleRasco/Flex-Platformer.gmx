<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar g;
g=0.5
left=false
right=false
jump=false
movespeed=4
airspeed=2
maxspeed=8
jumpheight=10
jumpbuffer=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Jumping

if(keyboard_check(ord('A'))||keyboard_check(vk_left))
    {
    left=true
    }
if!(keyboard_check(ord('A'))||keyboard_check(vk_left))
    {
    left=false
    }

if(keyboard_check(ord('D'))||keyboard_check(vk_right))
    {
    right=true
    }
if!(keyboard_check(ord('D'))||keyboard_check(vk_right))
    {
    right=false
    }

if(!keyboard_check(ord('A')))&amp;&amp;(!keyboard_check(vk_left))&amp;&amp;(!keyboard_check(ord('D')))&amp;&amp;(!keyboard_check(vk_right))
{
moving=false
}
else
{
movement=true
}

//Movement

if(left)
{

    if(hspeed&gt;-maxspeed)
    {
        if(place_free(x,y+1))
            {
            hspeed-=airspeed
            }
        else
            {
            hspeed-=movespeed
            }
    }
}

if(right)
{
   if(hspeed&lt;maxspeed)
    {
        if(place_free(x,y+1))
            {
            hspeed+=airspeed
            }
        else
            {
            hspeed+=movespeed
            }
    }
}   

if((!place_free(x,y+1))&amp;&amp;left=false&amp;&amp;right=false)
{
    hspeed=0
}


if((place_free(x,y+1))&amp;&amp;moving=false)
{
    if(hspeed&gt;0)
    {
    hspeed-=movespeed/30
    }
    if(hspeed&lt;0)
    {
    hspeed+=movespeed/30
    }
}

if(left=true&amp;&amp;right=true)
{
    hspeed=0
}
//Gravity and Falling
if(place_free(x,y+1)&amp;&amp;vspeed&lt;16)
    {
    vspeed+=g
    }

if(!place_free(x,y+vspeed)&amp;&amp;vspeed&lt;0)
    {
    vspeed=0
    move_contact_solid(90,vspeed)
    }
    
if(!place_free(x,y+vspeed)&amp;&amp;vspeed&gt;0)
    {
    vspeed=0
    move_contact_solid(270,vspeed)
    }
    
if(!place_free(x+hspeed,y)&amp;&amp;hspeed&gt;0)
    {
    hspeed=0
    move_contact_solid(0,hspeed)
    }

if(!place_free(x+hspeed,y)&amp;&amp;hspeed&lt;0)
    {
    hspeed=0
    move_contact_solid(180,hspeed)
    }

    
    
if(!place_free(x+hspeed,y+vspeed))
    {
    dir=point_direction(x,y,x+hspeed,y+vspeed)
    move_contact_solid(dir,speed)
    if(abs(hspeed)&gt;abs(vspeed))
    {
    vspeed=0
    }
    else
    {
    hspeed=0
    }
}

//Jumping
if((keyboard_check_pressed(vk_space)||keyboard_check_pressed(vk_up))&amp;&amp;(!place_free(x,y+1))&amp;&amp;(place_free(x,y-1)))
    {
    jump=true
    vspeed=-jumpheight
    }
else if (keyboard_check_pressed(vk_space)||keyboard_check_pressed(vk_up)&amp;&amp;(place_free(x,y+1)))
    {
    jumpbuffer=6
    }
if (jumpbuffer&gt;0)
    {
        if((!place_free(x,y+1))&amp;&amp;(place_free(x,y-1)))
            {
            jump=true
            vspeed=-jumpheight
            if((!keyboard_check(ord('A')))&amp;&amp;(!keyboard_check(vk_left))&amp;&amp;(!keyboard_check(ord('D')))&amp;&amp;(!keyboard_check(vk_right)))
                {
                hspeed=0
                }
            jumpbuffer=0
            }
        else
            {
            jumpbuffer-=1
            }
    }

if((keyboard_check_released(vk_space)||keyboard_check_released(vk_up))&amp;&amp;(place_free(x,y+1))&amp;&amp;jump==true)
    {
    if (vspeed&lt;0)
        {
        vspeed=0
        }
    jump=false
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
