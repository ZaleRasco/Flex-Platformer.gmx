<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playeridleleft</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiation
g=0.5
death=false

//Movement
moving=false
exiting=false
stuck=false
jumping=false

left=false
right=false
jump=false
down=false
up=false
leftrel=false
rightrel=false
jump=false
downrel=false
uprel=false

movespeed=4
airspeed=1
maxspeed=8
bubblespeed=6
bubblevspeed=-2
jumpheight=10
jumpbuffer=0

bubblespeed=3
walkspeed=5

exitjump=false

//Misc

trampoline=false
bubbleid=noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bubble syncing

if stuck = true
{
hspeed = bubbleid.hspeed
vspeed = bubbleid.vspeed
x = bubbleid.x
y = bubbleid.y
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Speed values for trampolines
vvspeed=vspeed
hhspeed=hspeed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Anti-Stuck Mechanic

while (place_meeting(x,y,obj_wall))
{
    offender = instance_nearest(x+16,y+16,obj_wall)
    toexit = point_direction(x,y,offender.x+16,offender.y+16)
    x-=lengthdir_x(1,toexit)
    y-=lengthdir_y(1,toexit)
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Speed Limits
if (vspeed &gt; 32)
{
    vspeed = 32
}

if (vspeed &lt; -32)
{
    vspeed = -32
}

if (hspeed &gt; 32)
{
    hspeed = 32
}

if (hspeed &lt; -32)
{
    hspeed = -32
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Key Presses and Releases
//Presses
if (keyboard_check(ord('A')) || keyboard_check(vk_left))
{
    left = true
}
else
{
    left = false
}

if (keyboard_check(ord('D')) || keyboard_check(vk_right))
{
    right = true
}
else
{
    right = false
}

if (keyboard_check(ord('S')) || keyboard_check(vk_down))
{
    down = true
}
else
{
    down = false
}

if ((left = true || right = true) &amp;&amp; !(left = true &amp;&amp; right = true))
{
    moving = true
}
else if ((left = false &amp;&amp; right = false) || (left = true &amp;&amp; right = true))
{
    moving = false
}

if ((keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_up)) &amp;&amp; !place_free(x, y + 1) &amp;&amp; place_free(x, y - 1))
{
    jump = true
}
else
{
    jump = false
}
//Releases
if (keyboard_check_released(ord('A')) || keyboard_check_released(vk_left))
{
    leftrel = true
}
else
{
    leftrel = false
}

if (keyboard_check_released(ord('D')) || keyboard_check_released(vk_right))
{
    rightrel = true
}
else
{
    rightrel = false
}

if (keyboard_check_released(ord('S')) || keyboard_check_released(vk_down))
{
    downrel = true
}
else
{
    downrel = false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Jumping

if(stuck=false)
{
if (left &amp;&amp; moving)
{
    if (hspeed &gt; -maxspeed)
    {
        if (!(-maxspeed &gt; (hspeed - movespeed)))
        {
            if (place_free(x, y + 1))
            {
                hspeed -= airspeed
            }
            else
            {
                hspeed -= movespeed
            }
        }
        else
        {
            hspeed = -maxspeed
        }
    }
}

if (right &amp;&amp; moving)
{
    if (hspeed &lt; maxspeed)
    {
        if (!(maxspeed &lt; (hspeed + movespeed)))
        {
            if (place_free(x, y + 1))
            {
                hspeed += airspeed
            }
            else
            {
                hspeed += movespeed
            }
        }
        else
        {
            hspeed = maxspeed
        }
    }
}

if (!place_free(x, y + 1))
{
    if (left = false &amp;&amp; right = false)
    {
        hspeed = 0
    }
    else if (hspeed &gt; maxspeed)
    {
        hspeed -= 1
    }
    else if (hspeed &lt; -maxspeed)
    {
        hspeed += 1
    }

}


if ((place_free(x, y + 1)) &amp;&amp; moving = false)
{
    if (hspeed &gt; 0)
    {
        hspeed -= movespeed / 10
    }
    if (hspeed &lt; 0)
    {
        hspeed += movespeed / 10
    }
}


//Gravity and Falling
if (place_free(x, y + 1))
{
    vspeed += g
}

if (!place_free(x, y + vspeed) &amp;&amp; vspeed &lt; 0)
{
    vspeed = 0
    move_contact_solid(90, vspeed)
}

if (!place_free(x, y + vspeed) &amp;&amp; vspeed &gt; 0)
{
    vspeed = 0
    move_contact_solid(270, vspeed)
}

if (!place_free(x + hspeed, y) &amp;&amp; hspeed &gt; 0)
{
    hspeed = 0
    move_contact_solid(0, hspeed)
}

if (!place_free(x + hspeed, y) &amp;&amp; hspeed &lt; 0)
{
    hspeed = 0
    move_contact_solid(180, hspeed)
}



if (!place_free(x + hspeed, y + vspeed))
{
    dir = point_direction(x, y, x + hspeed, y + vspeed)
    move_contact_solid(dir, speed)
    if (abs(hspeed) &gt; abs(vspeed))
    {
        vspeed = 0
    }
    else
    {
        hspeed = 0
    }
}

//Jumping
if (jump = true || exitjump = true)
{
    jumping = true
    vspeed = -jumpheight
    exitjump = false
}
else if ((jump) &amp;&amp; (place_free(x, y + 1)))
{
    jumpbuffer = 6
}
if (jumpbuffer &gt; 0)
{
    if ((!place_free(x, y + 1)) &amp;&amp; (place_free(x, y - 1)))
    {
        jumping = true
        vspeed = -jumpheight
        if (moving = false)
        {
            hspeed = 0
        }
        jumpbuffer = 0
    }
    else
    {
        jumpbuffer -= 1
    }
}

if (((keyboard_check_released(vk_space)) || (keyboard_check_released(vk_up))) &amp;&amp; (place_free(x, y + 1)) &amp;&amp; jumping == true)
{
    if (vspeed &lt; 0)
    {
        vspeed = 0
    }
    jumping = false
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Switching

if(place_meeting(x,y,obj_roomend))
{
room_goto_next()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death and respawn
if (death = true)
{
    room_restart()
    sprite=spr_playeridleleft
}

if (y &lt;= -66) or(y &gt;= room_height + 66) or(x &lt;= -66) or(x &gt;= room_width + 66)
{
    death = true
}

if place_meeting(x, y, obj_death)
{
    death = true
}

if place_meeting(x, y, obj_setplantbullet)
{
    death = true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bubbles
oldbubbleid = bubbleid
bubbleid = instance_nearest(x, y, obj_bubble)

//Entering
if (instance_number(obj_bubble) &gt; 0)
{
    if (stuck = false)
    {
        if (!(oldbubbleid == bubbleid))
        {
            exiting = false
        }
        if (place_meeting(x, y, obj_bubble) &amp;&amp; exiting = false)
        {
            x = bubbleid.x
            y = bubbleid.y
            if (obj_player.vspeed &gt; 0)
            {
                bubbleid.vspeed = min(obj_player.vspeed, 4)
                vspeed = min(obj_player.vspeed, 4)
            }
            if (obj_player.hspeed &gt; 0)
            {
                bubbleid.hspeed = min(obj_player.hspeed, 4)
                hspeed = min(obj_player.hspeed, 4)
            }
            if (obj_player.hspeed &lt; 0)
            {
                bubbleid.hspeed = max(obj_player.hspeed, -4)
                hspeed = max(obj_player.hspeed, -4)
            }
            stuck = true
            bubbleid.activated = true
        }
        else if (!place_meeting(x, y, obj_bubble) &amp;&amp; exiting = true)
        {
            exiting = false
        }
    }

    //Exiting
    if (stuck = true)
    {
        if (down = true)
        {
            bubbleid.vspeed=-1
        }
        if (keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_up))
        {
            if (bubbleid.vspeed &lt;= 0)
            {
                bubbleid.vspeed += 6
            }
            bubbleid.hspeed -= obj_player.hspeed * 2
            exiting = true
            stuck = false
            exitjump = true
        }
        if (hspeed &gt; 3 &amp;&amp; obj_player.moving = false)
        {
            hspeed -= hspeed / 2
        }
        else if (hspeed &gt; 0 &amp;&amp; obj_player.moving = false)
        {
            hspeed -= 0.1
        }

        if (hspeed &lt; -3 &amp;&amp; obj_player.moving = false)
        {
            hspeed += hspeed / 2
        }
        else if (hspeed &lt; 0 &amp;&amp; obj_player.moving = false)
        {
            hspeed += 0.1
        }

        vspeed = bubbleid.vspeed
        if (left)
        {
            if (hspeed &gt; -bubblespeed)
            {
                hspeed -= 0.3
                bubbleid.hspeed -= 0.3
            }
        }
        if (right)
        {
            if (hspeed &lt; bubblespeed)
            {
                hspeed += 0.5
                bubbleid.hspeed += 0.5
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprites
if (left = true)
{
    sprite_index = spr_playerleft
}

if (right = true)
{
    sprite_index = spr_playerright
}

if (keyboard_check_released(vk_left))
{
    sprite_index = spr_playeridleleft
}

if (keyboard_check_released(vk_right))
{
    sprite_index = spr_playeridleright
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bouncy
if (stuck = false)
{
    if (trampoline = false)
    {
        if (place_meeting(x, y + 1, obj_bouncy))
        {
            jumping = false
            vspeed = -14
        }
        if (place_meeting(x, y - 1, obj_bouncy))
        {
            jumping = false
            vspeed = 14
        }
        if (place_meeting(x + 1, y, obj_bouncy))
        {
            jumping = false
            hspeed = -14
        }
        if (place_meeting(x - 1, y, obj_bouncy))
        {
            jumping = false
            hspeed = 14
        }
    }

    else if (trampoline = true)
    {

        if (place_meeting(x, y + 1, obj_bouncy))
        {
            jumping = false
            vspeed = -vvspeed * 1.1
        }
        if (place_meeting(x, y - 1, obj_bouncy))
        {
            jumping = false
            vspeed = -vvspeed * 1.1
        }
        if (place_meeting(x + 1, y, obj_bouncy))
        {
            jumping = false
            hspeed = -hhspeed * 1.1
        }
        if (place_meeting(x - 1, y, obj_bouncy))
        {
            jumping = false
            hspeed = + -hhspeed * 1.1
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
