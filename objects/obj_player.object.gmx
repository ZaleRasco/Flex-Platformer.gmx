<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiation
g=0.5
death=false
//Movement
moving=false
exiting=false
stuck=false
jumping=false

left=false
right=false
jump=false
down=false
up=false

bubbleid=noone

movespeed=4
airspeed=1
maxspeed=8
jumpheight=10
jumpbuffer=0

bubblespeed=0.5
walkspeed=5

exitjump=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Jumping

if(keyboard_check(ord('A'))||keyboard_check(vk_left))
    {
    left=true
    }
if!(keyboard_check(ord('A'))||keyboard_check(vk_left))
    {
    left=false
    }

if(keyboard_check(ord('D'))||keyboard_check(vk_right))
    {
    right=true
    }
if!(keyboard_check(ord('D'))||keyboard_check(vk_right))
    {
    right=false
    }
if(keyboard_check(ord('S'))||keyboard_check(vk_down))
    {
    down=true
    }
if!(keyboard_check(ord('S'))||keyboard_check(vk_down))
    {
    down=false
    }
if(right=false&amp;&amp;left=false)
    {
    moving=false
    }
else
    {
    moving=true
    }
if((keyboard_check_pressed(vk_space))&amp;&amp;!place_free(x,y+1)&amp;&amp;place_free(x,y-1))
    {
    jump=true
    }
else
    {
    jump=false
    }

//Movement
if(stuck=false)
{
    if(left)
    {
    
        if(hspeed&gt;-maxspeed)
        {
            if(!(maxspeed&gt;(hspeed-movespeed)))
            {
            
                if(place_free(x,y+1))
                    {
                    hspeed-=airspeed
                    }
                else
                    {
                    hspeed-=movespeed
                    }
            }
            else
            {
            hspeed=-maxspeed
            }
        }
    }
    
    if(right)
    {
       if(hspeed&lt;maxspeed)
        {
            if(!(maxspeed&lt;(hspeed+movespeed)))
            {
                if(place_free(x,y+1))
                    {
                    hspeed+=airspeed
                    }
                else
                    {
                    hspeed+=movespeed
                    }
            }
            else
            {
            hspeed=maxspeed
            }
        }
    }   
    
    if((!place_free(x,y+1))&amp;&amp;left=false&amp;&amp;right=false)
    {
        hspeed=0
    }
    
    
    if((place_free(x,y+1))&amp;&amp;moving=false)
    {
        if(hspeed&gt;0)
        {
        hspeed-=movespeed/10
        }
        if(hspeed&lt;0)
        {
        hspeed+=movespeed/10
        }
    }
    
    if(left=true&amp;&amp;right=true)
    {
        hspeed=0
    }
    //Gravity and Falling
    if(place_free(x,y+1)&amp;&amp;vspeed&lt;16)
        {
        vspeed+=g
        }
    
    if(!place_free(x,y+vspeed)&amp;&amp;vspeed&lt;0)
        {
        vspeed=0
        move_contact_solid(90,vspeed)
        }
        
    if(!place_free(x,y+vspeed)&amp;&amp;vspeed&gt;0)
        {
        vspeed=0
        move_contact_solid(270,vspeed)
        }
        
    if(!place_free(x+hspeed,y)&amp;&amp;hspeed&gt;0)
        {
        hspeed=0
        move_contact_solid(0,hspeed)
        }
    
    if(!place_free(x+hspeed,y)&amp;&amp;hspeed&lt;0)
        {
        hspeed=0
        move_contact_solid(180,hspeed)
        }
    
        
        
    if(!place_free(x+hspeed,y+vspeed))
        {
        dir=point_direction(x,y,x+hspeed,y+vspeed)
        move_contact_solid(dir,speed)
        if(abs(hspeed)&gt;abs(vspeed))
        {
        vspeed=0
        }
        else
        {
        hspeed=0
        }
    }
    
    //Jumping
    if(jump=true||exitjump=true)
        {
        jumping=true
        vspeed=-jumpheight
        exitjump=false
        }
    else if (keyboard_check_pressed(vk_space)||keyboard_check_pressed(vk_up)&amp;&amp;(place_free(x,y+1)))
        {
        jumpbuffer=6
        }
    if (jumpbuffer&gt;0)
        {
            if((!place_free(x,y+1))&amp;&amp;(place_free(x,y-1)))
                {
                jumping=true
                vspeed=-jumpheight
                if((!keyboard_check(ord('A')))&amp;&amp;(!keyboard_check(vk_left))&amp;&amp;(!keyboard_check(ord('D')))&amp;&amp;(!keyboard_check(vk_right)))
                    {
                    hspeed=0
                    }
                jumpbuffer=0
                }
            else
                {
                jumpbuffer-=1
                }
        }
    
    if((keyboard_check_released(vk_space))&amp;&amp;(place_free(x,y+1))&amp;&amp;jumping==true)
        {
        if (vspeed&lt;0)
            {
            vspeed=0
            }
        jump=false
        }
} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Switching

if(place_meeting(x,y,obj_roomend))
{
room_goto_next()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death and respawn
if(death=true)
{
death=false
stuck=false
x=obj_roomstart.x
y=obj_roomstart.y
vspeed=0
hspeed=0
}

if(x&lt;-64||y&lt;-64)
{
death=true
}

if place_meeting(x,y,obj_death)
{
    death=true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bubbles
oldbubbleid=bubbleid
bubbleid=instance_nearest(x,y,obj_bubble)

if(instance_number(obj_bubble)&gt;0)
    {
    if(stuck=false)
        {
        if (!(oldbubbleid==bubbleid))
        {
            exiting=false
        }
        if(place_meeting(x,y,obj_bubble)&amp;&amp;exiting=false)
            {
                x=bubbleid.x
                y=bubbleid.y
                if(obj_player.vspeed&gt;0)
                    {
                    bubbleid.vspeed=min(obj_player.vspeed,4)
                    vspeed=min(obj_player.vspeed,4)
                    }
                if(obj_player.hspeed&gt;0)
                    {
                    bubbleid.hspeed=min(obj_player.hspeed,4)
                    hspeed=min(obj_player.hspeed,4)
                    }
                if(obj_player.hspeed&lt;0)
                    {
                    bubbleid.hspeed=max(obj_player.hspeed,-4)
                    hspeed=max(obj_player.hspeed,-4)
                    }
                stuck=true
                bubbleid.activated=true
            }
        else if(!place_meeting(x,y,obj_bubble)&amp;&amp;exiting=true)
            {
            exiting=false
            }
        }
    if(stuck=true)
        {
        if(down=true)
            {
            exiting=true
            stuck=false
            }
        if(keyboard_check_pressed(vk_space))
            {
            if(bubbleid.vspeed&lt;=0)
                {
                bubbleid.vspeed+=6
                }
            bubbleid.hspeed-=obj_player.hspeed*1.5
            exiting=true
            stuck=false
            exitjump=true
            }
        if(hspeed&gt;0&amp;&amp;obj_player.moving=false)
            {
            hspeed-=0.1
            }
    
        if(hspeed&lt;0&amp;&amp;obj_player.moving=false)
            {
            hspeed+=0.1
            }
            
        vspeed=bubbleid.vspeed
            if(left)
                {
                if(hspeed&gt;-walkspeed)
                    {
                    hspeed-=bubblespeed
                    bubbleid.hspeed-=bubblespeed
                    }
                }
            if(right)
                {
                if(hspeed&lt;walkspeed)
                    {
                    hspeed+=bubblespeed
                    bubbleid.hspeed+=bubblespeed
                    }
                }
        }        
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bouncy
if(place_meeting(x,y,obj_bouncy)&amp;&amp;place_free(x,y-1))
{
jumping=false
vspeed=-14
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
draw_text(100,100,obj_player.hspeed)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
