<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_small_crabs</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Starting variables
//Death
isDead = false

//Movement
hDirection = 0
behaviour = "wait"
canChangeDir = true
oldBehaviour = "wait"
behaviourChange = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save behaviour
oldBehaviour = behaviour
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if (place_meeting(x, y, obj_player) &amp;&amp; (isDead = false)){
    isDead = true
    global.crabDeaths = 1
    audio_resume_all()
    audio_play_sound(sound2, 10, false)
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Behaviour
//Sets the crabs movement behaviour
if (isDead = false){
    if (canChangeDir == true){
        behaviourChange = irandom(10)
    }    
    if (behaviourChange == 0){
        behaviour = "stayStill"
    } else if ((behaviourChange &gt; 0) and (behaviourChange &lt;= 3)) {
        behaviour = "turnAround"
    }else if (behaviourChange &gt;= 4) {
        behaviour = "move"
    } else {
        //Waiting! DON'T MOVE!
    }
    
    //Changes direction and speed based on behaviour
    
    
    if (behaviour == "stayStill"){
        moveSpeed = 0
        hDirection = 0
    } else if (behaviour == "turnAround"){
        if !(hDirection == 0){
            hDirection = (hDirection * -1)
        }else{
            hDirection = irandom_range(-1, 1)
        }
    } else if (behaviour == "move"){
        if (hDirection = 0){
            hDirection = irandom_range(-1, 1)
        }
    }
    
    
    //When behaviour changes, sets a timer so that the crab doesn't vibrate or something
    if (behaviour != oldBehaviour){
        behaviour = "wait"
        oldBehaviour = "wait"
        behaviourChange = -1
        waitTimer = (85 + irandom(10))
    }
    
    if (waitTimer &gt; 0){
        canChangeDir = false
        waitTimer -= 1
    }else{
        canChangeDir = true
    }
}else{
    hDirection = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
for (i = 0; i &lt; 2; i += 1){
    if (place_free((x + hDirection), y) &amp; !(place_free((x + (12 * hDirection)), (y+1)))){
        x += hDirection
    }else{
        hDirection = (hDirection * -1)
    }
}

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
